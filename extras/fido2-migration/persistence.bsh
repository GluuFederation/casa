import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.gluu.persist.PersistenceEntryManager;

import org.gluu.persist.couchbase.impl.CouchbaseEntryManagerFactory;
import org.gluu.persist.ldap.impl.LdapEntryManagerFactory;
import org.gluu.util.security.PropertiesDecrypter;
import org.gluu.util.security.StringEncrypter;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;

source("utils.bsh");

String BASE_DIR = "/etc/gluu/conf";
String CONFIG_FILE = BASE_DIR + File.separator + "gluu.properties";
utf8 = StandardCharsets.UTF_8;

getEntryManager() {

	Reader isr = new InputStreamReader(new FileInputStream(CONFIG_FILE), utf8);
	p = new Properties();
	p.load(isr);
	isr.close();
	type = p.getProperty("persistence.type").toLowerCase();
	prnt("Detected persistence type " + type);

	if (!type.equals("couchbase")) {
		//if it's hybrid or ldap, assume ldap
		type = "ldap";
	}

	String confFileName = format("%s%sgluu-%s.properties", BASE_DIR, File.separator, type);
	prnt("Loading " + confFileName);
	isr = new InputStreamReader(new FileInputStream(confFileName), utf8);
	p = new Properties();
	p.load(isr);
	
	p2 = new Properties();
	for (k : p.keySet()) {
		key = k.toString();
		if (!key.startsWith("ssl.")) {
			p2.setProperty(type + "#" + key, p.getProperty(k));
		}
	}
	p = p2;

	prnt("Decrypting properties...");
	isr = new InputStreamReader(new FileInputStream(BASE_DIR + File.separator + "salt"), utf8);
	Properties saltProperties = new Properties();
	saltProperties.load(isr);
	isr.close();
	salt = saltProperties.getProperty("encodeSalt");

	p = PropertiesDecrypter.decryptAllProperties(StringEncrypter.instance(salt), p);

	prnt("Obtaining a persistence entry manager...");
	PersistenceEntryManager entryManager;

	if (type.equals("ldap")) {
		LdapEntryManagerFactory ldapEntryManagerFactory = new LdapEntryManagerFactory();
		entryManager = ldapEntryManagerFactory.createEntryManager(p);
	} else {
		CouchbaseEntryManagerFactory couchbaseEntryManagerFactory = new CouchbaseEntryManagerFactory();
		couchbaseEntryManagerFactory.create();
		entryManager = couchbaseEntryManagerFactory.createEntryManager(p);
	}
	return entryManager;

}
